{"version":3,"sources":["components/controls.jsx","sorting-algorithms/insertion-sort.js","sorting-algorithms/merge-sort.js","sorting-algorithms/quick-sort.js","sorting-algorithms/bubble-sort.js","sorting-algorithms/counting-sort.js","components/visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["React","Component","animateInsertionSort","array","animations","i","length","push","j","swap","insertionSort","a","b","temp","aimateMergeSort","Array","sortedArray","slice","sort","mergeSort","left","right","mid","Math","floor","k","merge","console","log","arrayOne","arrayTwo","arraysAreEqual","animateQuickSort","quickSort","pivot","index","partition","animateBubbleSort","bubbleSort","animateCountingSort","maxNum","res","count","fill","countingSort","Visualizer","props","handleChange","event","tempArray","document","getElementsByClassName","style","height","innerHTML","isSorted","state","resetArray","setState","algorithm","target","value","bind","arrayComponents","this","map","className","key","backgroundColor","tempArrayComponents","onClick","type","name","id","checked","onChange","htmlFor","MAX","visibility","mainArray","action","index1","index2","setTimeout","color","parseInt","opacity","height1","height2","backgroundColor1","backgroundColor2","animateMergeSort","min","max","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+VAEuBA,IAAMC,UCFd,SAASC,EAAqBC,GACzC,IAAMC,EAAa,GAQnB,OAGJ,SAAuBD,EAAOC,GAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAK,CACnCD,EAAWG,KAAK,CAAC,SAAUF,IAE3B,IADA,IAAIG,EAAIH,EACDG,EAAI,GAAK,GAAG,CAEf,GADAJ,EAAWG,KAAK,CAAC,eAAgBC,EAAI,MACjCL,EAAMK,EAAI,GAAKL,EAAMK,IAKlB,CACHJ,EAAWG,KAAK,CAAC,eAAgBC,EAAI,IACrC,MANAJ,EAAWG,KAAK,CAAC,OAAQC,IACzBC,EAAKN,EAAOK,EAAI,EAAGA,GACnBJ,EAAWG,KAAK,CAAC,eAAgBC,IACjCA,IAMRJ,EAAWG,KAAK,CAAC,YAAaC,KArBlCE,CAAcP,EAAOC,GAEdA,EAuBX,SAASK,EAAKN,EAAOQ,EAAGC,GACpB,IAAIC,EAAOV,EAAMS,GACjBT,EAAMS,GAAKT,EAAMQ,GACjBR,EAAMQ,GAAKE,ECnCA,SAASC,EAAgBX,GACpC,IAAMC,EAAa,GAEfS,EAAO,IAAIE,MAAMZ,EAAMG,QAErBU,EAAcb,EAAMc,QAAQC,MAAK,SAACP,EAAGC,GAAJ,OAAUD,EAAIC,KAOrD,OAGJ,SAASO,EAAUhB,EAAOU,EAAMO,EAAMC,EAAOjB,GACzC,GAAIgB,IAASC,EAAO,OAEpB,IAAMC,EAAMC,KAAKC,OAAOJ,EAAOC,GAAS,GACxCF,EAAUhB,EAAOU,EAAMO,EAAME,EAAKlB,GAClCe,EAAUhB,EAAOU,EAAMS,EAAM,EAAGD,EAAOjB,GAI3C,SAAeD,EAAOU,EAAMO,EAAME,EAAKD,EAAOjB,GAC1CA,EAAWG,KAAK,CAAC,cAAea,EAAMC,IAEtC,IAAIhB,EAAIe,EACJZ,EAAIc,EAAM,EAEVG,EAAIL,EAER,KAAOf,GAAKiB,GAAOd,GAAKa,GACpBjB,EAAWG,KAAK,CAAC,eAAgBF,EAAGG,IAChCL,EAAME,GAAKF,EAAMK,IACjBJ,EAAWG,KAAK,CAAC,aAAckB,EAAGpB,IAClCQ,EAAKY,GAAKtB,EAAME,GAChBoB,IACApB,MAEAD,EAAWG,KAAK,CAAC,aAAckB,EAAGjB,IAClCK,EAAKY,GAAKtB,EAAMK,GAChBiB,IACAjB,KAGR,KAAOH,GAAKiB,GACRlB,EAAWG,KAAK,CAAC,eAAgBF,EAAGA,IACpCD,EAAWG,KAAK,CAAC,aAAckB,EAAGpB,IAClCQ,EAAKY,GAAKtB,EAAME,GAChBoB,IACApB,IAEJ,KAAOG,GAAKa,GACRjB,EAAWG,KAAK,CAAC,eAAgBC,EAAGA,IACpCJ,EAAWG,KAAK,CAAC,aAAckB,EAAGjB,IAClCK,EAAKY,GAAKtB,EAAMK,GAChBiB,IACAjB,IAGJ,IAAK,IAAIH,EAAIe,EAAMf,GAAKgB,EAAOhB,IAC3BD,EAAWG,KAAK,CAAC,WAAYF,EAAGA,IAChCF,EAAME,GAAKQ,EAAKR,GAEpBD,EAAWG,KAAK,CAAC,eAAgBa,EAAMC,IACvCjB,EAAWG,KAAK,CAAC,gBAAiB,EAAGJ,EAAMG,OAAS,IA7CpDoB,CAAMvB,EAAOU,EAAMO,EAAME,EAAKD,EAAOjB,GAfrCe,CAAUhB,EAAOU,EAAM,EAAGV,EAAMG,OAAS,EAAGF,GAC5CuB,QAAQC,IA+DZ,SAAwBC,EAAUC,GAC9B,GAAID,EAASvB,SAAWwB,EAASxB,OAAQ,OAAO,EAChD,IAAK,IAAID,EAAI,EAAGA,EAAIwB,EAASvB,OAAQD,IACjC,GAAIwB,EAASxB,KAAOyB,EAASzB,GACzB,OAAO,EAGf,OAAO,EAtEK0B,CAAe5B,EAAOa,IAClCW,QAAQC,IAAIf,GAILT,ECZI,SAAS4B,EAAiB7B,GACrC,IAAMC,EAAa,GAQnB,OAGJ,SAAS6B,EAAU9B,EAAOiB,EAAMC,EAAOjB,GAEnC,GAAIgB,EAAOC,EAAO,CACd,IAAIa,EAMZ,SAAmB/B,EAAOiB,EAAMC,EAAOjB,GACnCA,EAAWG,KAAK,CAAC,cAAea,EAAMC,IACtCjB,EAAWG,KAAK,CAAC,WAAYc,IAK7B,IAJA,IAAIa,EAAQ/B,EAAMkB,GAEdc,EAAQf,EAEHf,EAAIe,EAAMf,EAAIgB,EAAOhB,IAC1BD,EAAWG,KAAK,CAAC,OAAQF,IAErBF,EAAME,IAAM6B,GAGZ9B,EAAWG,KAAK,CAAC,OAAQ4B,EAAO9B,IAC5B8B,IAAU9B,GACVD,EAAWG,KAAK,CAAC,cAAeF,IAEpCD,EAAWG,KAAK,CAAC,cAAe4B,IAChC1B,EAAKN,EAAOgC,EAAO9B,GAEnB8B,KAGA/B,EAAWG,KAAK,CAAC,cAAeF,IAUxC,OALAD,EAAWG,KAAK,CAAC,OAAQ4B,EAAOd,IAChCjB,EAAWG,KAAK,CAAC,cAAec,IAEhCZ,EAAKN,EAAOgC,EAAOd,GACnBjB,EAAWG,KAAK,CAAC,gBAAiB,EAAGJ,EAAMG,OAAS,IAC7C6B,EAvCSC,CAAUjC,EAAOiB,EAAMC,EAAOjB,GAC1C6B,EAAU9B,EAAOiB,EAAMc,EAAQ,EAAG9B,GAClC6B,EAAU9B,EAAO+B,EAAQ,EAAGb,EAAOjB,IAVvC6B,CAAU9B,EAAO,EAAGA,EAAMG,OAAS,EAAGF,GAE/BA,EAgDX,SAASK,EAAKN,EAAOQ,EAAGC,GACpB,IAAIC,EAAOV,EAAMS,GACjBT,EAAMS,GAAKT,EAAMQ,GACjBR,EAAMQ,GAAKE,EC5DA,SAASwB,EAAkBlC,GACtC,IAAMC,EAAa,GAQnB,OAGJ,SAAoBD,EAAOC,GACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAC9B,IAAK,IAAIG,EAAI,EAAGA,EAAIL,EAAMG,OAAS,EAAID,EAAGG,IACtCJ,EAAWG,KAAK,CAAC,eAAgBC,EAAGA,EAAI,IACpCL,EAAMK,GAAKL,EAAMK,EAAI,KACrBJ,EAAWG,KAAK,CAAC,OAAQC,EAAGA,EAAI,IAChCC,EAAKN,EAAOK,EAAGA,EAAI,IAEvBJ,EAAWG,KAAK,CAAC,eAAgBC,EAAGA,EAAI,IAbhD8B,CAAWnC,EAAOC,GAEXA,EAgBX,SAASK,EAAKN,EAAOQ,EAAGC,GACpB,IAAIC,EAAOV,EAAMS,GACjBT,EAAMS,GAAKT,EAAMQ,GACjBR,EAAMQ,GAAKE,EC5BA,SAAS0B,EAAoBpC,EAAOqC,GACjD,IAAMpC,EAAa,GAEbY,EAAcb,EAAMc,QAAQC,MAAK,SAACP,EAAGC,GAAJ,OAAUD,EAAIC,KAOrD,OAGF,SAAsBT,EAAOqC,EAAQpC,GACnC,IAAIqC,EAAM,IAAI1B,MAAMZ,EAAMG,QAE1BF,EAAWG,KAAK,CAAC,cAIjB,IAHA,IAAImC,EAAQ,IAAI3B,MAAMyB,GAAQG,KAAK,GAG1BtC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAEhCD,EAAWG,KAAK,CAAC,SAAUF,EAAGF,EAAME,GAAK,IACzCD,EAAWG,KAAK,CAAC,SAAUF,EAAGF,EAAME,GAAK,IACzCqC,EAAMvC,EAAME,GAAK,KAInB,IAAK,IAAIA,EAAI,EAAGA,EAAIqC,EAAMpC,OAAQD,IAChCqC,EAAMrC,IAAMqC,EAAMrC,EAAI,GAKxB,IAAK,IAAIA,EAAIoC,EAAInC,OAAS,EAAGD,GAAK,EAAGA,IACnCoC,EAAIC,EAAMvC,EAAME,GAAK,GAAK,GAAKF,EAAME,GACrCqC,EAAMvC,EAAME,GAAK,KAGnB,IAAK,IAAIA,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAChCF,EAAME,GAAKoC,EAAIpC,GAEfD,EAAWG,KAAK,CAAC,UAAWF,EAAGoC,EAAIpC,GAAK,IACxCD,EAAWG,KAAK,CAAC,UAAWF,EAAGoC,EAAIpC,GAAK,IAtC1CuC,CAAazC,EAAOqC,EAAQpC,GAC5BuB,QAAQC,IA2CV,SAAwBC,EAAUC,GAChC,GAAID,EAASvB,SAAWwB,EAASxB,OAAQ,OAAO,EAChD,IAAK,IAAID,EAAI,EAAGA,EAAIwB,EAASvB,OAAQD,IACnC,GAAIwB,EAASxB,KAAOyB,EAASzB,GAC3B,OAAO,EAGX,OAAO,EAlDK0B,CAAe5B,EAAOa,IAI3BZ,ECCT,IAWqByC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAucRC,aAAe,SAACC,GAGd,IAFA,IAAMC,EAAYC,SAASC,uBAAuB,kBAC5CT,EAAQQ,SAASC,uBAAuB,mBACrC9C,EAAI,EAAGA,EAAI4C,EAAU3C,OAAQD,IACpC4C,EAAU5C,GAAG+C,MAAMC,OAAS,MAC5BX,EAAMrC,GAAGiD,UAAY,IAa3B,SAAkBnD,GAChB,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAChC,GAAIF,EAAME,GAAKF,EAAME,EAAI,GACvB,OAAO,EAIX,OAAO,GAlBDkD,CAAS,EAAKC,MAAMrD,QAAQ,EAAKsD,aACrC,EAAKC,SAAS,CACZC,UAAWX,EAAMY,OAAOC,SA/c1B,EAAKL,MAAQ,CACXrD,MAAO,GACPwD,UAAW,gBAGb,EAAKF,WAAa,EAAKA,WAAWK,KAAhB,gBAClB,EAAKf,aAAe,EAAKA,aAAae,KAAlB,gBACpB,EAAK5C,KAAO,EAAKA,KAAK4C,KAAV,gBATK,E,qDAajB,IAAMC,EAAkBC,KAAKR,MAAMrD,MAAM8D,KAAI,SAACJ,EAAO1B,GACnD,OACE,yBACE+B,UAAU,iBACVC,IAAKhC,EACLiB,MAAO,CACLgB,gBAxBK,UAyBLf,OAAO,GAAD,OA7BJ,EA6BSQ,EAAL,YAORZ,GAAY,IAAIlC,OAAQ4B,KAAK,GACN,iBAAzBqB,KAAKR,MAAMG,WACbV,EAAU3C,OAvCJ,GAwCN2C,EAAUN,KAAK,KAEfM,EAAU3C,OA5CK,GA6Cf2C,EAAUN,KAAK,IAEjB,IAAM0B,EAAsBpB,EAAUgB,KAAI,SAACJ,EAAO1B,GAChD,OACE,yBACE+B,UAAU,iBACVC,IAAKhC,EACLiB,MAAO,CACLgB,gBA7CK,UA8CLf,OAAO,GAAD,OAnDJ,EAmDSQ,EAAL,QAGR,uBAAGK,UAAU,wBAInB,OACE,6BAOE,yBAAKA,UAAU,sBACb,4BAAQI,QAASN,KAAKP,YAAtB,sBACA,yBAAKS,UAAU,0BACb,yBAAKA,UAAU,eACb,2BACEK,KAAK,QACLC,KAAK,YACLX,MAAM,gBACNY,GAAG,gBACHC,QAAkC,kBAAzBV,KAAKR,MAAMG,UACpBgB,SAAUX,KAAKjB,eAEjB,2BAAO6B,QAAQ,iBAAf,cAEF,yBAAKV,UAAU,eACb,2BACEK,KAAK,QACLC,KAAK,YACLX,MAAM,aACNY,GAAG,aACHC,QAAkC,eAAzBV,KAAKR,MAAMG,UACpBgB,SAAUX,KAAKjB,eAEjB,2BAAO6B,QAAQ,cAAf,WAEF,yBAAKV,UAAU,eACb,2BACEK,KAAK,QACLC,KAAK,YACLX,MAAM,YACNY,GAAG,YACHC,QAAkC,cAAzBV,KAAKR,MAAMG,UACpBgB,SAAUX,KAAKjB,eAEjB,2BAAO6B,QAAQ,aAAf,UAEF,yBAAKV,UAAU,eACb,2BACEK,KAAK,QACLC,KAAK,YACLX,MAAM,YACNY,GAAG,YACHC,QAAkC,cAAzBV,KAAKR,MAAMG,UACpBgB,SAAUX,KAAKjB,eAEjB,2BAAO6B,QAAQ,aAAf,UAEF,yBAAKV,UAAU,eACb,2BACEK,KAAK,QACLC,KAAK,YACLX,MAAM,eACNY,GAAG,eACHC,QAAkC,iBAAzBV,KAAKR,MAAMG,UACpBgB,SAAUX,KAAKjB,eAEjB,2BAAO6B,QAAQ,gBAAf,cAGJ,4BAAQN,QAASN,KAAK9C,MAAtB,SAGF,yBAAKgD,UAAU,kBAAkBd,MAAO,CAAEC,OAAO,GAAD,OAAKwB,GAAL,QAC7Cd,GAEH,yBAAKG,UAAU,kBAAkBd,MAAO,CAAEC,OAAO,GAAD,OAAKwB,GAAL,QAC7CR,M,6BAQP,OAAQL,KAAKR,MAAMG,WACjB,IAAK,YACHK,KAAK7C,YACL,MACF,IAAK,gBACH6C,KAAKtD,gBACL,MACF,IAAK,aACHsD,KAAK1B,aACL,MACF,IAAK,YACH0B,KAAK/B,YACL,MACF,IAAK,eACH+B,KAAKpB,eAGTM,SAASC,uBACP,0BACA,GAAGC,MAAM0B,WAAa,a,qCAGV,IAAD,OACbnD,QAAQC,IAAIoC,KAAKR,MAAMrD,OACvB,IAAMC,EAAamC,EAAoByB,KAAKR,MAAMrD,MArK1C,IAuKRwB,QAAQC,IAAIoC,KAAKR,MAAMrD,OAQvB,IANA,IAAM4E,EAAY7B,SAASC,uBAAuB,kBAC5CF,EAAYC,SAASC,uBAAuB,kBAC5CT,EAAQQ,SAASC,uBAAuB,mBARjC,WAYJ9C,GAZI,kBAasBD,EAAWC,GAbjC,GAaJ2E,EAbI,KAaIC,EAbJ,KAaYC,EAbZ,KAeX,OAAQF,GACN,IAAK,YACHG,YAAW,WACT,IAAK,IAAI9E,EAAI,EAAGA,EArLhB,GAqLyBA,IACvB4C,EAAU5C,GAAG+C,MAAMC,OAAnB,UArLA,GAqLgChD,EAAI,GAApC,MACA4C,EAAU5C,GAAG+C,MAAMgB,gBAlLhB,UAmLH1B,EAAMrC,GAAGiD,UAAY,IArLX,GAuLXjD,GACH,MAQF,IAAK,SACH8E,YAAW,WACTJ,EAAUE,GAAQ7B,MAAMgB,gBA/LnB,UAgMLnB,EAAUiC,GAAQ9B,MAAMgB,gBAhMnB,UAiML1B,EAAMwC,GAAQ9B,MAAMgC,MAjMf,UAmML1C,EAAMwC,GAAQ5B,UAAY+B,SAAS3C,EAAMwC,GAAQ5B,WAAa,IAtMlD,GAuMXjD,GACH,MACF,IAAK,SACH8E,YAAW,WACTJ,EAAUE,GAAQ7B,MAAMC,OAAS,MACjCJ,EAAUiC,GAAQ9B,MAAMgB,gBA1MnB,UA2ML1B,EAAMwC,GAAQ9B,MAAMgC,MAzMf,YAJO,GA8MX/E,GACH,MACF,IAAK,UACH8E,YAAW,WACTlC,EAAUiC,GAAQ9B,MAAMgB,gBA/MnB,UAgNL1B,EAAMwC,GAAQ9B,MAAMgC,MAhNf,UAiNLL,EAAUE,GAAQ7B,MAAMC,OAAxB,UAtNE,EAuNA,EAAKG,MAAMrD,MAAM8E,GADnB,MAGAF,EAAUE,GAAQ7B,MAAMgB,gBApNnB,UAqNL1B,EAAMwC,GAAQ5B,UAAY+B,SAAS3C,EAAMwC,GAAQ5B,WAAa,IAxNlD,GAyNXjD,GACH,MACF,IAAK,UACH8E,YAAW,WACTJ,EAAUE,GAAQ7B,MAAMgB,gBA3NnB,UA4NL1B,EAAMwC,GAAQ9B,MAAMgC,MA1Nf,UA2NLnC,EAAUiC,GAAQ9B,MAAMgB,gBA7NnB,YAFO,GAgOX/D,KApDAA,EAAI,EAAGA,EAAID,EAAWE,OAAQD,IAAM,EAApCA,K,kCA+DT,IAJA,IAAMD,EAAa4B,EAAiBgC,KAAKR,MAAMrD,OAEzC4E,EAAY7B,SAASC,uBAAuB,kBAHxC,WAKD9C,GALC,kBAMyBD,EAAWC,GANpC,GAMD2E,EANC,KAMOC,EANP,KAMeC,EANf,KAQR,OAAQF,GACN,IAAK,cACHG,YAAW,WACTxD,QAAQC,IAAR,wBAA6BqD,EAA7B,cAAyCC,IACzC,IAAK,IAAI7E,EAAI,EAAGA,EAvPP,GAuPyBA,KAC5BA,EAAI4E,GAAU5E,EAAI6E,KACpBH,EAAU1E,GAAG+C,MAAMkC,QAAU,UApPrB,GAuPXjF,GACH,MACF,IAAK,WACH8E,YAAW,WACTxD,QAAQC,IAAR,mBAAwBqD,IACxBF,EAAUE,GAAQ7B,MAAMgB,gBAAkB,SA5P9B,GA6PX/D,GACH,MACF,IAAK,OACH8E,YAAW,WACTxD,QAAQC,IAAR,eAAoBqD,IACpBF,EAAUE,GAAQ7B,MAAMgB,gBAAkB,WAlQ9B,GAmQX/D,GACH,MACF,IAAK,OACH8E,YAAW,WACTxD,QAAQC,IAAR,eAAoBqD,EAApB,gBAAkCC,IACnBH,EAAUE,GAAQ7B,MAClB2B,EAAUG,GAAQ9B,MADjC,IAGMmC,EAAUR,EAAUE,GAAQ7B,MAAMC,OAClCmC,EAAUT,EAAUG,GAAQ9B,MAAMC,OAExC0B,EAAUG,GAAQ9B,MAAMC,OAASkC,EACjCR,EAAUE,GAAQ7B,MAAMC,OAASmC,EAEjC,IAAMC,EAAmBV,EAAUE,GAAQ7B,MAAMgB,gBAC3CsB,EAAmBX,EAAUG,GAAQ9B,MAAMgB,gBAEjDW,EAAUE,GAAQ7B,MAAMgB,gBAAkBsB,EAC1CX,EAAUG,GAAQ9B,MAAMgB,gBAAkBqB,IArR9B,GAsRXpF,GACH,MACF,IAAK,cACH8E,YAAW,WACTxD,QAAQC,IAAR,sBAA2BqD,IAC3BF,EAAUE,GAAQ7B,MAAMgB,gBAAkB,QA3R9B,GA4RX/D,GACH,MACF,IAAK,cACH8E,YAAW,WACTxD,QAAQC,IAAR,sBAA2BqD,IAC3BF,EAAUE,GAAQ7B,MAAMgB,gBAAkB,UAjS9B,GAkSX/D,GACH,MACF,IAAK,gBACH8E,YAAW,WACTxD,QAAQC,IAAR,6BAAkCqD,EAAlC,eAA+CC,IAC/C,IAAK,IAAI7E,EAAI4E,EAAQ5E,GAAK6E,EAAQ7E,IAChC0E,EAAU1E,GAAG+C,MAAMkC,QAAU,IAC7BP,EAAU1E,GAAG+C,MAAMgB,gBAvShB,YAFO,GA2SX/D,KAhEAA,EAAI,EAAGA,EAAID,EAAWE,OAAQD,IAAM,EAApCA,K,mCA0ET,IAJA,IAAMD,EAAaiC,EAAkB2B,KAAKR,MAAMrD,OAE1C4E,EAAY7B,SAASC,uBAAuB,kBAHvC,WAKF9C,GALE,kBAMwBD,EAAWC,GANnC,GAMF2E,EANE,KAMMC,EANN,KAMcC,EANd,KAQT,OAAQF,GACN,IAAK,eACHG,YAAW,WACTJ,EAAUE,GAAQ7B,MAAMgB,gBAxTnB,UAyTLW,EAAUG,GAAQ9B,MAAMgB,gBAzTnB,YAHO,GA6TX/D,GACH,MACF,IAAK,OACH8E,YAAW,WACT,IAAMI,EAAUR,EAAUE,GAAQ7B,MAAMC,OAClCmC,EAAUT,EAAUG,GAAQ9B,MAAMC,OAExC0B,EAAUG,GAAQ9B,MAAMC,OAASkC,EACjCR,EAAUE,GAAQ7B,MAAMC,OAASmC,IArUrB,GAsUXnF,GACH,MACF,IAAK,eACH8E,YAAW,WACTJ,EAAUE,GAAQ7B,MAAMgB,gBAxUnB,UAyULW,EAAUG,GAAQ9B,MAAMgB,gBAzUnB,YAFO,GA4UX/D,KAvBAA,EAAI,EAAGA,EAAID,EAAWE,OAAQD,IAAM,EAApCA,K,kCAkCT,IALA,IAAMD,EAAauF,EAAiB3B,KAAKR,MAAMrD,OAEzC4E,EAAY7B,SAASC,uBAAuB,kBAC5CF,EAAYC,SAASC,uBAAuB,kBAJxC,WAMD9C,GANC,kBAOyBD,EAAWC,GAPpC,GAOD2E,EAPC,KAOOC,EAPP,KAOeC,EAPf,KASR,OAAQF,GACN,IAAK,cACHG,YAAW,WACT,IAAK,IAAI9E,EAAI,EAAGA,EAlWP,GAkWyBA,KAC5BA,EAAI4E,GAAU5E,EAAI6E,KACpBH,EAAU1E,GAAG+C,MAAMkC,QAAU,UA/VrB,GAkWXjF,GACH,MACF,IAAK,eACH8E,YAAW,WACTxD,QAAQC,IAAR,wBAA6BqD,EAA7B,gBAA2CC,IAC3CH,EAAUE,GAAQ7B,MAAMgB,gBApWnB,UAqWLW,EAAUG,GAAQ9B,MAAMgB,gBArWnB,YAHO,GAyWX/D,GACH,MACF,IAAK,aACH8E,YAAW,WACTxD,QAAQC,IAAR,yBAA8BqD,EAA9B,iBAA6CC,IAC7CjC,EAAUgC,GAAQ7B,MAAMC,OAAS0B,EAAUG,GAAQ9B,MAAMC,OACzD0B,EAAUG,GAAQ9B,MAAMC,OAAS,QA/WrB,GAgXXhD,GACH,MACF,IAAK,WACH8E,YAAW,WACTxD,QAAQC,IAAI,aACZmD,EAAUE,GAAQ7B,MAAMC,OAASJ,EAAUgC,GAAQ7B,MAAMC,OACzDJ,EAAUgC,GAAQ7B,MAAMC,OAAS,QAtXrB,GAuXXhD,GACH,MAEF,IAAK,eACH8E,YAAW,WACTxD,QAAQC,IAAI,iBACZ,IAAK,IAAIvB,EAAI4E,EAAQ5E,GAAK6E,EAAQ7E,IAChC0E,EAAU1E,GAAG+C,MAAMgB,gBA5XhB,YAFO,GAgYX/D,GACH,MACF,IAAK,gBACH8E,YAAW,WACT,IAAK,IAAI9E,EAAI4E,EAAQ5E,GAAK6E,EAAQ7E,IAChC0E,EAAU1E,GAAG+C,MAAMkC,QAAU,MArYnB,GAuYXjF,KAhDAA,EAAI,EAAGA,EAAID,EAAWE,OAAQD,IAAM,EAApCA,K,sCAgET,IALA,IAAMD,EAAaF,EAAqB8D,KAAKR,MAAMrD,OAE7C4E,EAAY7B,SAASC,uBAAuB,kBAC5CF,EAAYC,SAASC,uBAAuB,kBAJpC,WAML9C,GANK,kBAOYD,EAAWC,GAPvB,GAOL2E,EAPK,KAOG7C,EAPH,KAQZ,OAAQ6C,GACN,IAAK,SACHG,YAAW,WACTlC,EAAUd,GAAOiB,MAAMC,OAAS0B,EAAU5C,GAAOiB,MAAMC,OACvD0B,EAAU5C,GAAOiB,MAAMC,OAAS,QA7ZpB,GA+ZXhD,GACH,MACF,IAAK,eACH8E,YAAW,WACTJ,EAAU5C,GAAOiB,MAAMgB,gBAhalB,YAHO,GAqaX/D,GACH,MACF,IAAK,OACH8E,YAAW,WACTJ,EAAU5C,GAAOiB,MAAMC,OAAS0B,EAAU5C,EAAQ,GAAGiB,MAAMC,OAC3D0B,EAAU5C,EAAQ,GAAGiB,MAAMC,OAAS,MACpCJ,EAAUd,EAAQ,GAAGiB,MAAMC,OAASJ,EAAUd,GAAOiB,MAAMC,OAC3DJ,EAAUd,GAAOiB,MAAMC,OAAS,QA5apB,GA8aXhD,GACH,MACF,IAAK,eACH8E,YAAW,WACTJ,EAAU5C,GAAOiB,MAAMgB,gBAhblB,YAFO,GAobX/D,GACH,MACF,IAAK,YACH8E,YAAW,WACTJ,EAAU5C,GAAOiB,MAAMC,OAASJ,EAAUd,GAAOiB,MAAMC,OACvDJ,EAAUd,GAAOiB,MAAMC,OAAS,MAChC0B,EAAU5C,GAAOiB,MAAMgB,gBAxblB,YAFO,GA4bX/D,KArCAA,EAAI,EAAGA,EAAID,EAAWE,OAAQD,IAAM,EAApCA,K,0CA6CT2D,KAAKP,e,mCAIL,IADA,IAsBemC,EAAKC,EAtBd1F,EAAQ,GACLE,EAAI,EAAGA,EA7cC,GA6ciBA,IAChCF,EAAMI,MAoBOqF,EAjeP,EAieYC,EAheZ,GAieHtE,KAAKC,MAAMD,KAAKuE,UAAYD,EAAMD,GAAOA,KAnB9C5B,KAAKN,SAAS,CAAEvD,c,GArcoBH,IAAMC,WCR/B8F,MARf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,QCGc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrD,SAASsD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrF,QAAQqF,MAAMA,EAAMC,c","file":"static/js/main.297a19a9.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Controls extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n        <div className=\"controls-container\">\n          <button onClick={this.props.resetArray}>Generate new array</button>\n          <div className=\"algo-options-container\">\n            <div className=\"algo-option\">\n              <input\n                type=\"radio\"\n                name=\"algorithm\"\n                value=\"mergeSort\"\n                id=\"mergeSort\"\n                checked={this.props.algorithm === \"mergeSort\"}\n                onChange={() => this.props.handleChange}\n              ></input>\n              <label htmlFor=\"mergeSort\">Merge Sort</label>\n            </div>\n            <div className=\"algo-option\">\n              <input\n                type=\"radio\"\n                name=\"algorithm\"\n                value=\"insertionSort\"\n                id=\"insertionSort\"\n                checked={this.props.algorithm === \"insertionSort\"}\n                onChange={() => this.props.handleChange}\n              ></input>\n              <label htmlFor=\"insertionSort\">Insertion Sort</label>\n            </div>\n          </div>\n          <button onClick={this.props.sort}>SORT</button>\n        </div>\n    );\n  }\n}\n\nexport default Controls;\n","export default function animateInsertionSort(array) {\n    const animations = [];\n\n    // const sortedArray = array.slice().sort((a, b) => a - b);\n    // insertionSort(array, animations);\n    // console.log(arraysAreEqual(array, sortedArray));\n\n    insertionSort(array, animations);\n\n    return animations;\n}\n\nfunction insertionSort(array, animations) {\n    for (let i = 1; i < array.length; i++) {\n        animations.push([\"newKey\", i]);\n        let j = i;\n        while (j - 1 >= 0) {\n            animations.push([\"changeColour\", j - 1]);\n            if (array[j - 1] > array[j]) {\n                animations.push([\"swap\", j]);\n                swap(array, j - 1, j);\n                animations.push([\"revertColour\", j]);\n                j--;\n            } else {\n                animations.push([\"revertColour\", j - 1]);\n                break;\n            }\n        }\n        animations.push([\"insertKey\", j])\n    }\n}\n\nfunction swap(array, a, b) {\n    let temp = array[b];\n    array[b] = array[a];\n    array[a] = temp;\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            return false;\n        }\n    }\n    return true;\n}","export default function aimateMergeSort(array) {\n    const animations = [];\n\n    let temp = new Array(array.length);\n\n    const sortedArray = array.slice().sort((a, b) => a - b);\n    mergeSort(array, temp, 0, array.length - 1, animations);\n    console.log(arraysAreEqual(array, sortedArray));\n    console.log(temp);\n\n    //mergeSort(array, 0, array.length - 1, animations);\n\n    return animations;\n}\n\nfunction mergeSort(array, temp, left, right, animations) {\n    if (left === right) return;\n\n    const mid = Math.floor((left + right) / 2);\n    mergeSort(array, temp, left, mid, animations);\n    mergeSort(array, temp, mid + 1, right, animations);\n    merge(array, temp, left, mid, right, animations);\n}\n\nfunction merge(array, temp, left, mid, right, animations) {\n    animations.push([\"setBoundary\", left, right]);\n\n    let i = left;\n    let j = mid + 1;\n\n    let k = left;\n\n    while (i <= mid && j <= right) {\n        animations.push([\"changeColour\", i, j]);\n        if (array[i] < array[j]) {\n            animations.push([\"insertTemp\", k, i]);\n            temp[k] = array[i];\n            k++;\n            i++;\n        } else {\n            animations.push([\"insertTemp\", k, j]);\n            temp[k] = array[j];\n            k++;\n            j++;\n        }\n    }\n    while (i <= mid) {\n        animations.push([\"changeColour\", i, i]);\n        animations.push([\"insertTemp\", k, i]);\n        temp[k] = array[i];\n        k++;\n        i++;\n    }\n    while (j <= right) {\n        animations.push([\"changeColour\", j, j]);\n        animations.push([\"insertTemp\", k, j]);\n        temp[k] = array[j];\n        k++;\n        j++;\n    }\n\n    for (let i = left; i <= right; i++) {\n        animations.push([\"copyBack\", i, i]);\n        array[i] = temp[i];\n    }\n    animations.push([\"revertColour\", left, right]);\n    animations.push([\"resetBoundary\", 0, array.length - 1]);\n}\n\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            return false;\n        }\n    }\n    return true;\n}","export default function animateQuickSort(array) {\n    const animations = [];\n\n    // const sortedArray = array.slice().sort((a, b) => a - b);\n    // quickSort(array, 0, array.length - 1, animations);\n    // console.log(arraysAreEqual(array, sortedArray));\n\n    quickSort(array, 0, array.length - 1, animations);\n\n    return animations;\n}\n\nfunction quickSort(array, left, right, animations) {\n\n    if (left < right) {\n        let pivot = partition(array, left, right, animations);\n        quickSort(array, left, pivot - 1, animations);\n        quickSort(array, pivot + 1, right, animations);\n    }\n}\n\nfunction partition(array, left, right, animations) {\n    animations.push([\"setBoundary\", left, right]);\n    animations.push([\"setPivot\", right]);\n    let pivot = array[right];\n\n    let index = left;\n\n    for (let i = left; i < right; i++) {\n        animations.push([\"curr\", i]);\n\n        if (array[i] <= pivot) {\n\n            //animations.push([\"swap\", index, i]);\n            animations.push([\"swap\", index, i]);\n            if (index !== i) {\n                animations.push([\"greaterThan\", i]);\n            }\n            animations.push([\"smallerThan\", index]);\n            swap(array, index, i);\n            //animations.push([\"revertColour\", index, i]);\n            index++;\n            //animations.push([\"setIndex\", index, index]);\n        } else {\n            animations.push([\"greaterThan\", i]);\n            //animations.push([\"revertColour\", i, i]);\n        }\n\n    }\n    animations.push([\"swap\", index, right]);\n    animations.push([\"greaterThan\", right]);\n    //animations.push([\"revertColour\", index, right]);\n    swap(array, index, right);\n    animations.push([\"resetBoundary\", 0, array.length - 1]);\n    return index;\n}\n\nfunction swap(array, a, b) {\n    let temp = array[b];\n    array[b] = array[a];\n    array[a] = temp;\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            return false;\n        }\n    }\n    return true;\n}","export default function animateBubbleSort(array) {\n    const animations = [];\n\n    // const sortedArray = array.slice().sort((a, b) => a - b);\n    // bubbleSort(array, animations);\n    // console.log(arraysAreEqual(sortedArray, array));\n\n    bubbleSort(array, animations);\n\n    return animations;\n}\n\nfunction bubbleSort(array, animations) {\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array.length - 1 - i; j++) {\n            animations.push([\"changeColour\", j, j + 1]);\n            if (array[j] > array[j + 1]) {\n                animations.push([\"swap\", j, j + 1]);\n                swap(array, j, j + 1);\n            }\n            animations.push([\"revertColour\", j, j + 1]);\n        }\n    }\n}\n\nfunction swap(array, a, b) {\n    let temp = array[b];\n    array[b] = array[a];\n    array[a] = temp;\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            return false;\n        }\n    }\n    return true;\n}","export default function animateCountingSort(array, maxNum) {\n  const animations = [];\n\n  const sortedArray = array.slice().sort((a, b) => a - b);\n  //const quickSortedArray = countingSort(array, maxNum, animations);\n  countingSort(array, maxNum, animations);\n  console.log(arraysAreEqual(array, sortedArray));\n\n  //countingSort(array, maxNum, animations);\n\n  return animations;\n}\n\nfunction countingSort(array, maxNum, animations) {\n  let res = new Array(array.length);\n\n  animations.push([\"initCount\"]);\n  let count = new Array(maxNum).fill(0);\n  //console.log(count);\n\n  for (let i = 0; i < array.length; i++) {\n    //animations.push([\"curr\", i, array[i] - 1]);\n    animations.push([\"count1\", i, array[i] - 1]);\n    animations.push([\"count2\", i, array[i] - 1]);\n    count[array[i] - 1]++;\n  }\n  //console.log(count);\n\n  for (let i = 1; i < count.length; i++) {\n    count[i] += count[i - 1];\n  }\n\n  //console.log(count);\n\n  for (let i = res.length - 1; i >= 0; i--) {\n    res[count[array[i] - 1] - 1] = array[i];\n    count[array[i] - 1]--;\n  }\n\n  for (let i = 0; i < array.length; i++) {\n    array[i] = res[i];\n\n    animations.push([\"insert1\", i, res[i] - 1]);\n    animations.push([\"insert2\", i, res[i] - 1]);\n  }\n\n  //return res;\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n\n/*\nint[] countSort(int[] arr, int size, int max) {\n  int[] output = new int[size];\n\n  //initialize count\n  int[] count = new int[max + 1];\n  for (int i = 0; i < max; i++) {\n    count[i] = 0;\n  }\n\n  //frequency of each input element\n  for (int i = 0; i < size; i++) {\n    count[arr[i]]++;\n  }\n\n  //cumulative frequency\n  for (int i = 1; i < size; i++) {\n    count[i] += count[i-1];\n  }\n\n  //place elements\n  for (int i = size - 1; i >= 0; i--) {\n    output[count[arr[i]]-1] = arr[i];\n    count[arr[i]]--;\n  }\n\n  return output;\n}\n*/","import React from \"react\";\nimport \"./visualizer.css\";\n\nimport Controls from \"./controls\";\n\nimport animateInsertionSort from \"../sorting-algorithms/insertion-sort\";\nimport animateMergeSort from \"../sorting-algorithms/merge-sort\";\nimport animateQuickSort from \"../sorting-algorithms/quick-sort\";\nimport animateBubbleSort from \"../sorting-algorithms/bubble-sort\";\nimport animateCountingSort from \"../sorting-algorithms/counting-sort\";\n\nconst NUM_ELEMENTS = 10;\nconst MIN = 1;\nconst MAX = 15;\nconst SCALE = 5;\n\nconst ANIMATION_SPEED = 50;\n\nconst COLOUR_1 = \"#3fc1c9\";\nconst COLOUR_2 = \"#fc5185\";\nconst COLOUR_3 = \"#364f6b\";\n\nexport default class Visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      algorithm: \"countingSort\",\n    };\n\n    this.resetArray = this.resetArray.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.sort = this.sort.bind(this);\n  }\n\n  render() {\n    const arrayComponents = this.state.array.map((value, index) => {\n      return (\n        <div\n          className=\"main-array-bar\"\n          key={index}\n          style={{\n            backgroundColor: COLOUR_1,\n            height: `${value * SCALE}px`,\n          }}\n        ></div>\n      );\n    });\n\n    //const tempArray = new Array(NUM_ELEMENTS).fill(0);\n    const tempArray = new Array().fill(0);\n    if (this.state.algorithm === \"countingSort\") {\n      tempArray.length = MAX;\n      tempArray.fill(0);\n    } else {\n      tempArray.length = NUM_ELEMENTS;\n      tempArray.fill(0);\n    }\n    const tempArrayComponents = tempArray.map((value, index) => {\n      return (\n        <div\n          className=\"temp-array-bar\"\n          key={index}\n          style={{\n            backgroundColor: COLOUR_2,\n            height: `${value * SCALE}px`,\n          }}\n        >\n          <p className=\"temp-array-text\"></p>\n        </div>\n      );\n    });\n    return (\n      <div>\n        {/* <Controls\n          resetArray={this.resetArray}\n          handleChange={this.handleChange}\n          algorithm={this.state.algorithm}\n          sort={this.sort}\n        ></Controls> */}\n        <div className=\"controls-container\">\n          <button onClick={this.resetArray}>Generate new array</button>\n          <div className=\"algo-options-container\">\n            <div className=\"algo-option\">\n              <input\n                type=\"radio\"\n                name=\"algorithm\"\n                value=\"insertionSort\"\n                id=\"insertionSort\"\n                checked={this.state.algorithm === \"insertionSort\"}\n                onChange={this.handleChange}\n              ></input>\n              <label htmlFor=\"insertionSort\">Insertion</label>\n            </div>\n            <div className=\"algo-option\">\n              <input\n                type=\"radio\"\n                name=\"algorithm\"\n                value=\"bubbleSort\"\n                id=\"bubbleSort\"\n                checked={this.state.algorithm === \"bubbleSort\"}\n                onChange={this.handleChange}\n              ></input>\n              <label htmlFor=\"bubbleSort\">Bubble</label>\n            </div>\n            <div className=\"algo-option\">\n              <input\n                type=\"radio\"\n                name=\"algorithm\"\n                value=\"mergeSort\"\n                id=\"mergeSort\"\n                checked={this.state.algorithm === \"mergeSort\"}\n                onChange={this.handleChange}\n              ></input>\n              <label htmlFor=\"mergeSort\">Merge</label>\n            </div>\n            <div className=\"algo-option\">\n              <input\n                type=\"radio\"\n                name=\"algorithm\"\n                value=\"quickSort\"\n                id=\"quickSort\"\n                checked={this.state.algorithm === \"quickSort\"}\n                onChange={this.handleChange}\n              ></input>\n              <label htmlFor=\"quickSort\">Quick</label>\n            </div>\n            <div className=\"algo-option\">\n              <input\n                type=\"radio\"\n                name=\"algorithm\"\n                value=\"countingSort\"\n                id=\"countingSort\"\n                checked={this.state.algorithm === \"countingSort\"}\n                onChange={this.handleChange}\n              ></input>\n              <label htmlFor=\"countingSort\">Counting</label>\n            </div>\n          </div>\n          <button onClick={this.sort}>SORT</button>\n        </div>\n\n        <div className=\"array-container\" style={{ height: `${MAX * SCALE}px` }}>\n          {arrayComponents}\n        </div>\n        <div className=\"array-container\" style={{ height: `${MAX * SCALE}px` }}>\n          {tempArrayComponents}\n        </div>\n      </div>\n    );\n  }\n\n  //SORT\n  sort() {\n    switch (this.state.algorithm) {\n      case \"mergeSort\":\n        this.mergeSort();\n        break;\n      case \"insertionSort\":\n        this.insertionSort();\n        break;\n      case \"bubbleSort\":\n        this.bubbleSort();\n        break;\n      case \"quickSort\":\n        this.quickSort();\n        break;\n      case \"countingSort\":\n        this.countingSort();\n        break;\n    }\n    document.getElementsByClassName(\n      \"algo-options-container\"\n    )[0].style.visibility = \"visibile\";\n  }\n\n  countingSort() {\n    console.log(this.state.array);\n    const animations = animateCountingSort(this.state.array, MAX);\n\n    console.log(this.state.array);\n\n    const mainArray = document.getElementsByClassName(\"main-array-bar\");\n    const tempArray = document.getElementsByClassName(\"temp-array-bar\");\n    const count = document.getElementsByClassName(\"temp-array-text\");\n\n    //parseInt(value) + 1\n\n    for (let i = 0; i < animations.length; i++) {\n      const [action, index1, index2] = animations[i];\n\n      switch (action) {\n        case \"initCount\":\n          setTimeout(() => {\n            for (let i = 0; i < MAX; i++) {\n              tempArray[i].style.height = `${(i + 1) * SCALE}px`;\n              tempArray[i].style.backgroundColor = COLOUR_1;\n              count[i].innerHTML = 0;\n            }\n          }, i * ANIMATION_SPEED);\n          break;\n        // case \"curr\":\n        //   setTimeout(() => {\n        //     mainArray[index1].style.backgroundColor = COLOUR_2;\n        //     tempArray[index2].style.backgroundColor = COLOUR_2;\n        //     count[index2].style.color = COLOUR_2;\n        //   }, i * ANIMATION_SPEED);\n        //   break;\n        case \"count1\":\n          setTimeout(() => {\n            mainArray[index1].style.backgroundColor = COLOUR_2;\n            tempArray[index2].style.backgroundColor = COLOUR_2;\n            count[index2].style.color = COLOUR_2;\n            //mainArray[index1].style.height = \"0px\";\n            count[index2].innerHTML = parseInt(count[index2].innerHTML) + 1;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"count2\":\n          setTimeout(() => {\n            mainArray[index1].style.height = \"0px\";\n            tempArray[index2].style.backgroundColor = COLOUR_1;\n            count[index2].style.color = COLOUR_3;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"insert1\":\n          setTimeout(() => {\n            tempArray[index2].style.backgroundColor = COLOUR_2;\n            count[index2].style.color = COLOUR_2;\n            mainArray[index1].style.height = `${\n              this.state.array[index1] * SCALE\n            }px`;\n            mainArray[index1].style.backgroundColor = COLOUR_2;\n            count[index2].innerHTML = parseInt(count[index2].innerHTML) - 1;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"insert2\":\n          setTimeout(() => {\n            mainArray[index1].style.backgroundColor = COLOUR_1;\n            count[index2].style.color = COLOUR_3;\n            tempArray[index2].style.backgroundColor = COLOUR_1;\n          }, i * ANIMATION_SPEED);\n          break;\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = animateQuickSort(this.state.array);\n\n    const mainArray = document.getElementsByClassName(\"main-array-bar\");\n\n    for (let i = 0; i < animations.length; i++) {\n      const [action, index1, index2] = animations[i];\n      //console.log(`${action} / ${index1} / ${index2}`);\n      switch (action) {\n        case \"setBoundary\":\n          setTimeout(() => {\n            console.log(`setBoundary + ${index1} + ${index2}`);\n            for (let i = 0; i < NUM_ELEMENTS; i++) {\n              if (i < index1 || i > index2) {\n                mainArray[i].style.opacity = \"0.25\";\n              }\n            }\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"setPivot\":\n          setTimeout(() => {\n            console.log(`setPivot ${index1}`);\n            mainArray[index1].style.backgroundColor = \"pink\";\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"curr\":\n          setTimeout(() => {\n            console.log(`curr ${index1}`);\n            mainArray[index1].style.backgroundColor = \"yellow\";\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"swap\":\n          setTimeout(() => {\n            console.log(`swap ${index1} and ${index2}`);\n            const style1 = mainArray[index1].style;\n            const style2 = mainArray[index2].style;\n\n            const height1 = mainArray[index1].style.height;\n            const height2 = mainArray[index2].style.height;\n\n            mainArray[index2].style.height = height1;\n            mainArray[index1].style.height = height2;\n\n            const backgroundColor1 = mainArray[index1].style.backgroundColor;\n            const backgroundColor2 = mainArray[index2].style.backgroundColor;\n\n            mainArray[index1].style.backgroundColor = backgroundColor2;\n            mainArray[index2].style.backgroundColor = backgroundColor1;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"greaterThan\":\n          setTimeout(() => {\n            console.log(`greaterThan ${index1}`);\n            mainArray[index1].style.backgroundColor = \"red\";\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"smallerThan\":\n          setTimeout(() => {\n            console.log(`smallerThan ${index1}`);\n            mainArray[index1].style.backgroundColor = \"green\";\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"resetBoundary\":\n          setTimeout(() => {\n            console.log(`resetBoundary from ${index1} to ${index2}`);\n            for (let i = index1; i <= index2; i++) {\n              mainArray[i].style.opacity = \"1\";\n              mainArray[i].style.backgroundColor = COLOUR_1;\n            }\n          }, i * ANIMATION_SPEED);\n          break;\n      }\n    }\n  }\n  bubbleSort() {\n    const animations = animateBubbleSort(this.state.array);\n\n    const mainArray = document.getElementsByClassName(\"main-array-bar\");\n\n    for (let i = 0; i < animations.length; i++) {\n      const [action, index1, index2] = animations[i];\n\n      switch (action) {\n        case \"changeColour\":\n          setTimeout(() => {\n            mainArray[index1].style.backgroundColor = COLOUR_2;\n            mainArray[index2].style.backgroundColor = COLOUR_2;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"swap\":\n          setTimeout(() => {\n            const height1 = mainArray[index1].style.height;\n            const height2 = mainArray[index2].style.height;\n\n            mainArray[index2].style.height = height1;\n            mainArray[index1].style.height = height2;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"revertColour\":\n          setTimeout(() => {\n            mainArray[index1].style.backgroundColor = COLOUR_1;\n            mainArray[index2].style.backgroundColor = COLOUR_1;\n          }, i * ANIMATION_SPEED);\n          break;\n      }\n    }\n  }\n  mergeSort() {\n    const animations = animateMergeSort(this.state.array);\n\n    const mainArray = document.getElementsByClassName(\"main-array-bar\");\n    const tempArray = document.getElementsByClassName(\"temp-array-bar\");\n\n    for (let i = 0; i < animations.length; i++) {\n      const [action, index1, index2] = animations[i];\n\n      switch (action) {\n        case \"setBoundary\":\n          setTimeout(() => {\n            for (let i = 0; i < NUM_ELEMENTS; i++) {\n              if (i < index1 || i > index2) {\n                mainArray[i].style.opacity = \"0.25\";\n              }\n            }\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"changeColour\":\n          setTimeout(() => {\n            console.log(`change colour ${index1} and ${index2}`);\n            mainArray[index1].style.backgroundColor = COLOUR_2;\n            mainArray[index2].style.backgroundColor = COLOUR_2;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"insertTemp\":\n          setTimeout(() => {\n            console.log(`insert temp at ${index1} from ${index2}`);\n            tempArray[index1].style.height = mainArray[index2].style.height;\n            mainArray[index2].style.height = \"0px\";\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"copyBack\": {\n          setTimeout(() => {\n            console.log(\"copy back\");\n            mainArray[index1].style.height = tempArray[index1].style.height;\n            tempArray[index1].style.height = \"0px\";\n          }, i * ANIMATION_SPEED);\n          break;\n        }\n        case \"revertColour\":\n          setTimeout(() => {\n            console.log(\"revert colour\");\n            for (let i = index1; i <= index2; i++) {\n              mainArray[i].style.backgroundColor = COLOUR_1;\n            }\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"resetBoundary\": {\n          setTimeout(() => {\n            for (let i = index1; i <= index2; i++) {\n              mainArray[i].style.opacity = \"1\";\n            }\n          }, i * ANIMATION_SPEED);\n        }\n      }\n    }\n\n    // const mainArray = document.getElementsByClassName(\"main-array-bar\");\n    // const tempArray = document.getElementsByClassName(\"temp-array-bar\");\n    // mainArray[1].style.height = \"0px\";\n    // tempArray[1].style.height = `${this.state.array[1] * SCALE}px`;\n  }\n  insertionSort() {\n    const animations = animateInsertionSort(this.state.array);\n\n    const mainArray = document.getElementsByClassName(\"main-array-bar\");\n    const tempArray = document.getElementsByClassName(\"temp-array-bar\");\n\n    for (let i = 0; i < animations.length; i++) {\n      const [action, index] = animations[i];\n      switch (action) {\n        case \"newKey\":\n          setTimeout(() => {\n            tempArray[index].style.height = mainArray[index].style.height;\n            mainArray[index].style.height = \"0px\";\n            //console.log(\"new key!\" + index);\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"changeColour\":\n          setTimeout(() => {\n            mainArray[index].style.backgroundColor = COLOUR_2;\n            //console.log(\"change colour!\" + index);\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"swap\":\n          setTimeout(() => {\n            mainArray[index].style.height = mainArray[index - 1].style.height;\n            mainArray[index - 1].style.height = \"0px\";\n            tempArray[index - 1].style.height = tempArray[index].style.height;\n            tempArray[index].style.height = \"0px\";\n            //console.log(\"swap!\" + index);\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"revertColour\":\n          setTimeout(() => {\n            mainArray[index].style.backgroundColor = COLOUR_1;\n            //console.log(\"revert colour!\" + index);\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"insertKey\":\n          setTimeout(() => {\n            mainArray[index].style.height = tempArray[index].style.height;\n            tempArray[index].style.height = \"0px\";\n            mainArray[index].style.backgroundColor = COLOUR_1;\n            //console.log(\"insert key!\" + index);\n          }, i * ANIMATION_SPEED);\n          break;\n      }\n    }\n  }\n\n  //ARRAY\n  componentDidMount() {\n    this.resetArray();\n  }\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUM_ELEMENTS; i++) {\n      array.push(randomInt(MIN, MAX));\n    }\n    this.setState({ array });\n  }\n\n  //SELECT ALGORITHM\n  handleChange = (event) => {\n    const tempArray = document.getElementsByClassName(\"temp-array-bar\");\n    const count = document.getElementsByClassName(\"temp-array-text\");\n    for (let i = 0; i < tempArray.length; i++) {\n      tempArray[i].style.height = \"0px\";\n      count[i].innerHTML = \"\";\n    }\n    if (isSorted(this.state.array)) this.resetArray();\n    this.setState({\n      algorithm: event.target.value,\n    });\n  };\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction isSorted(array) {\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < array[i - 1]) {\n      return false;\n      break;\n    }\n  }\n  return true;\n}\n","import React from 'react';\n\nimport './App.css';\n\nimport Visualizer from './components/visualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer></Visualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}