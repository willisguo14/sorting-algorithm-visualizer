{"version":3,"sources":["components/controls.jsx","sorting-algorithms/insertion-sort.js","sorting-algorithms/merge-sort.js","sorting-algorithms/quick-sort.js","sorting-algorithms/bubble-sort.js","sorting-algorithms/counting-sort.js","components/visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["React","Component","animateInsertionSort","array","animations","push","i","length","j","swap","insertionSort","a","b","temp","aimateMergeSort","Array","sortedArray","slice","sort","mergeSort","left","right","mid","Math","floor","k","merge","console","log","arrayOne","arrayTwo","arraysAreEqual","animateQuickSort","quickSort","pivot","index","partition","animateBubbleSort","bubbleSort","animateCountingSort","maxNum","res","count","fill","countingSort","Visualizer","props","handleChange","event","tempArray","document","getElementsByClassName","style","height","innerHTML","setState","algorithm","target","value","state","resetArray","bind","arrayComponents","this","map","className","key","backgroundColor","tempArrayComponents","onClick","type","name","id","checked","onChange","htmlFor","MAX","mainArray","controls","action","index1","index2","setTimeout","visibility","color","parseInt","opacity","height1","height2","backgroundColor1","backgroundColor2","animateMergeSort","min","max","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fa4e2be6.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Controls extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n        <div className=\"controls-container\">\n          <button onClick={this.props.resetArray}>Generate new array</button>\n          <div className=\"algo-options-container\">\n            <div className=\"algo-option\">\n              <input\n                type=\"radio\"\n                name=\"algorithm\"\n                value=\"mergeSort\"\n                id=\"mergeSort\"\n                checked={this.props.algorithm === \"mergeSort\"}\n                onChange={() => this.props.handleChange}\n              ></input>\n              <label htmlFor=\"mergeSort\">Merge Sort</label>\n            </div>\n            <div className=\"algo-option\">\n              <input\n                type=\"radio\"\n                name=\"algorithm\"\n                value=\"insertionSort\"\n                id=\"insertionSort\"\n                checked={this.props.algorithm === \"insertionSort\"}\n                onChange={() => this.props.handleChange}\n              ></input>\n              <label htmlFor=\"insertionSort\">Insertion Sort</label>\n            </div>\n          </div>\n          <button onClick={this.props.sort}>SORT</button>\n        </div>\n    );\n  }\n}\n\nexport default Controls;\n","export default function animateInsertionSort(array) {\n    const animations = [];\n\n    // const sortedArray = array.slice().sort((a, b) => a - b);\n    // insertionSort(array, animations);\n    // console.log(arraysAreEqual(array, sortedArray));\n    animations.push([\"begin\"]);\n    insertionSort(array, animations);\n    animations.push([\"finish\"]);\n    return animations;\n}\n\nfunction insertionSort(array, animations) {\n    for (let i = 1; i < array.length; i++) {\n        animations.push([\"newKey\", i]);\n        let j = i;\n        while (j - 1 >= 0) {\n            animations.push([\"changeColour\", j - 1]);\n            if (array[j - 1] > array[j]) {\n                animations.push([\"swap\", j]);\n                swap(array, j - 1, j);\n                animations.push([\"revertColour\", j]);\n                j--;\n            } else {\n                animations.push([\"revertColour\", j - 1]);\n                break;\n            }\n        }\n        animations.push([\"insertKey\", j])\n    }\n}\n\nfunction swap(array, a, b) {\n    let temp = array[b];\n    array[b] = array[a];\n    array[a] = temp;\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            return false;\n        }\n    }\n    return true;\n}","export default function aimateMergeSort(array) {\n    const animations = [];\n\n    let temp = new Array(array.length);\n\n    const sortedArray = array.slice().sort((a, b) => a - b);\n    animations.push([\"begin\"]);\n    mergeSort(array, temp, 0, array.length - 1, animations);\n    animations.push([\"finish\"]);\n    console.log(arraysAreEqual(array, sortedArray));\n    console.log(temp);\n\n    //mergeSort(array, 0, array.length - 1, animations);\n\n    return animations;\n}\n\nfunction mergeSort(array, temp, left, right, animations) {\n    if (left === right) return;\n\n    const mid = Math.floor((left + right) / 2);\n    mergeSort(array, temp, left, mid, animations);\n    mergeSort(array, temp, mid + 1, right, animations);\n    merge(array, temp, left, mid, right, animations);\n}\n\nfunction merge(array, temp, left, mid, right, animations) {\n    animations.push([\"setBoundary\", left, right]);\n\n    let i = left;\n    let j = mid + 1;\n\n    let k = left;\n\n    while (i <= mid && j <= right) {\n        animations.push([\"changeColour\", i, j]);\n        if (array[i] < array[j]) {\n            animations.push([\"insertTemp\", k, i]);\n            temp[k] = array[i];\n            k++;\n            i++;\n        } else {\n            animations.push([\"insertTemp\", k, j]);\n            temp[k] = array[j];\n            k++;\n            j++;\n        }\n    }\n    while (i <= mid) {\n        animations.push([\"changeColour\", i, i]);\n        animations.push([\"insertTemp\", k, i]);\n        temp[k] = array[i];\n        k++;\n        i++;\n    }\n    while (j <= right) {\n        animations.push([\"changeColour\", j, j]);\n        animations.push([\"insertTemp\", k, j]);\n        temp[k] = array[j];\n        k++;\n        j++;\n    }\n\n    for (let i = left; i <= right; i++) {\n        animations.push([\"copyBack\", i, i]);\n        array[i] = temp[i];\n    }\n    animations.push([\"revertColour\", left, right]);\n    animations.push([\"resetBoundary\", 0, array.length - 1]);\n}\n\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            return false;\n        }\n    }\n    return true;\n}","export default function animateQuickSort(array) {\n    const animations = [];\n\n    // const sortedArray = array.slice().sort((a, b) => a - b);\n    // quickSort(array, 0, array.length - 1, animations);\n    // console.log(arraysAreEqual(array, sortedArray));\n    animations.push([\"begin\"]);\n    quickSort(array, 0, array.length - 1, animations);\n    animations.push([\"finish\"]);\n    return animations;\n}\n\nfunction quickSort(array, left, right, animations) {\n\n    if (left < right) {\n        let pivot = partition(array, left, right, animations);\n        quickSort(array, left, pivot - 1, animations);\n        quickSort(array, pivot + 1, right, animations);\n    }\n}\n\nfunction partition(array, left, right, animations) {\n    animations.push([\"setBoundary\", left, right]);\n    animations.push([\"setPivot\", right]);\n    let pivot = array[right];\n\n    let index = left;\n\n    for (let i = left; i < right; i++) {\n        animations.push([\"curr\", i]);\n\n        if (array[i] <= pivot) {\n\n            //animations.push([\"swap\", index, i]);\n            animations.push([\"swap\", index, i]);\n            if (index !== i) {\n                animations.push([\"greaterThan\", i]);\n            }\n            animations.push([\"smallerThan\", index]);\n            swap(array, index, i);\n            //animations.push([\"revertColour\", index, i]);\n            index++;\n            //animations.push([\"setIndex\", index, index]);\n        } else {\n            animations.push([\"greaterThan\", i]);\n            //animations.push([\"revertColour\", i, i]);\n        }\n\n    }\n    animations.push([\"swap\", index, right]);\n    animations.push([\"greaterThan\", right]);\n    //animations.push([\"revertColour\", index, right]);\n    swap(array, index, right);\n    animations.push([\"resetBoundary\", 0, array.length - 1]);\n    return index;\n}\n\nfunction swap(array, a, b) {\n    let temp = array[b];\n    array[b] = array[a];\n    array[a] = temp;\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            return false;\n        }\n    }\n    return true;\n}","export default function animateBubbleSort(array) {\n    const animations = [];\n\n    // const sortedArray = array.slice().sort((a, b) => a - b);\n    // bubbleSort(array, animations);\n    // console.log(arraysAreEqual(sortedArray, array));\n    animations.push([\"begin\"]);\n    bubbleSort(array, animations);\n    animations.push([\"finish\"]);\n    return animations;\n}\n\nfunction bubbleSort(array, animations) {\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array.length - 1 - i; j++) {\n            animations.push([\"changeColour\", j, j + 1]);\n            if (array[j] > array[j + 1]) {\n                animations.push([\"swap\", j, j + 1]);\n                swap(array, j, j + 1);\n            }\n            animations.push([\"revertColour\", j, j + 1]);\n        }\n    }\n}\n\nfunction swap(array, a, b) {\n    let temp = array[b];\n    array[b] = array[a];\n    array[a] = temp;\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            return false;\n        }\n    }\n    return true;\n}","export default function animateCountingSort(array, maxNum) {\n  const animations = [];\n\n  const sortedArray = array.slice().sort((a, b) => a - b);\n  //const quickSortedArray = countingSort(array, maxNum, animations);\n  animations.push([\"begin\"]);\n  countingSort(array, maxNum, animations);\n  animations.push([\"finish\"]);\n  //console.log(arraysAreEqual(array, sortedArray));\n\n  //countingSort(array, maxNum, animations);\n\n  return animations;\n}\n\nfunction countingSort(array, maxNum, animations) {\n  let res = new Array(array.length);\n\n  animations.push([\"initCount\"]);\n  let count = new Array(maxNum).fill(0);\n  //console.log(count);\n\n  for (let i = 0; i < array.length; i++) {\n    //animations.push([\"curr\", i, array[i] - 1]);\n    animations.push([\"count1\", i, array[i] - 1]);\n    animations.push([\"count2\", i, array[i] - 1]);\n    count[array[i] - 1]++;\n  }\n  //console.log(count);\n\n  for (let i = 1; i < count.length; i++) {\n    count[i] += count[i - 1];\n  }\n\n  //console.log(count);\n\n  for (let i = res.length - 1; i >= 0; i--) {\n    res[count[array[i] - 1] - 1] = array[i];\n    count[array[i] - 1]--;\n  }\n\n  for (let i = 0; i < array.length; i++) {\n    array[i] = res[i];\n\n    animations.push([\"insert1\", i, res[i] - 1]);\n    animations.push([\"insert2\", i, res[i] - 1]);\n  }\n\n  //return res;\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n\n/*\nint[] countSort(int[] arr, int size, int max) {\n  int[] output = new int[size];\n\n  //initialize count\n  int[] count = new int[max + 1];\n  for (int i = 0; i < max; i++) {\n    count[i] = 0;\n  }\n\n  //frequency of each input element\n  for (int i = 0; i < size; i++) {\n    count[arr[i]]++;\n  }\n\n  //cumulative frequency\n  for (int i = 1; i < size; i++) {\n    count[i] += count[i-1];\n  }\n\n  //place elements\n  for (int i = size - 1; i >= 0; i--) {\n    output[count[arr[i]]-1] = arr[i];\n    count[arr[i]]--;\n  }\n\n  return output;\n}\n*/","import React from \"react\";\nimport \"./visualizer.css\";\n\nimport Controls from \"./controls\";\n\nimport animateInsertionSort from \"../sorting-algorithms/insertion-sort\";\nimport animateMergeSort from \"../sorting-algorithms/merge-sort\";\nimport animateQuickSort from \"../sorting-algorithms/quick-sort\";\nimport animateBubbleSort from \"../sorting-algorithms/bubble-sort\";\nimport animateCountingSort from \"../sorting-algorithms/counting-sort\";\n\nconst NUM_ELEMENTS = 20;\nconst MIN = 1;\nconst MAX = 15;\nconst SCALE = 15;\n\nconst ANIMATION_SPEED = 50;\n\nconst COLOUR_1 = \"#3fc1c9\";\nconst COLOUR_2 = \"#fc5185\";\nconst COLOUR_3 = \"#364f6b\";\n\nexport default class Visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      algorithm: \"countingSort\",\n    };\n\n    this.resetArray = this.resetArray.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.sort = this.sort.bind(this);\n  }\n\n  render() {\n    const arrayComponents = this.state.array.map((value, index) => {\n      return (\n        <div\n          className=\"main-array-bar\"\n          key={index}\n          style={{\n            backgroundColor: COLOUR_1,\n            height: `${value * SCALE}px`,\n          }}\n        ></div>\n      );\n    });\n\n    //const tempArray = new Array(NUM_ELEMENTS).fill(0);\n    const tempArray = new Array().fill(0);\n    if (this.state.algorithm === \"countingSort\") {\n      tempArray.length = MAX;\n      tempArray.fill(0);\n    } else {\n      tempArray.length = NUM_ELEMENTS;\n      tempArray.fill(0);\n    }\n    const tempArrayComponents = tempArray.map((value, index) => {\n      return (\n        <div\n          className=\"temp-array-bar\"\n          key={index}\n          style={{\n            backgroundColor: COLOUR_2,\n            height: `${value * SCALE}px`,\n          }}\n        >\n          <p className=\"temp-array-text\"></p>\n        </div>\n      );\n    });\n    return (\n      <div>\n        {/* <Controls\n          resetArray={this.resetArray}\n          handleChange={this.handleChange}\n          algorithm={this.state.algorithm}\n          sort={this.sort}\n        ></Controls> */}\n        <div className=\"controls-container\">\n          <button onClick={this.resetArray}>New array</button>\n          <div className=\"algo-options-container\">\n            <div className=\"algo-option\">\n              <input\n                type=\"radio\"\n                name=\"algorithm\"\n                value=\"insertionSort\"\n                id=\"insertionSort\"\n                checked={this.state.algorithm === \"insertionSort\"}\n                onChange={this.handleChange}\n              ></input>\n              <label htmlFor=\"insertionSort\">Insertion</label>\n            </div>\n            <div className=\"algo-option\">\n              <input\n                type=\"radio\"\n                name=\"algorithm\"\n                value=\"bubbleSort\"\n                id=\"bubbleSort\"\n                checked={this.state.algorithm === \"bubbleSort\"}\n                onChange={this.handleChange}\n              ></input>\n              <label htmlFor=\"bubbleSort\">Bubble</label>\n            </div>\n            <div className=\"algo-option\">\n              <input\n                type=\"radio\"\n                name=\"algorithm\"\n                value=\"mergeSort\"\n                id=\"mergeSort\"\n                checked={this.state.algorithm === \"mergeSort\"}\n                onChange={this.handleChange}\n              ></input>\n              <label htmlFor=\"mergeSort\">Merge</label>\n            </div>\n            <div className=\"algo-option\">\n              <input\n                type=\"radio\"\n                name=\"algorithm\"\n                value=\"quickSort\"\n                id=\"quickSort\"\n                checked={this.state.algorithm === \"quickSort\"}\n                onChange={this.handleChange}\n              ></input>\n              <label htmlFor=\"quickSort\">Quick</label>\n            </div>\n            <div className=\"algo-option\">\n              <input\n                type=\"radio\"\n                name=\"algorithm\"\n                value=\"countingSort\"\n                id=\"countingSort\"\n                checked={this.state.algorithm === \"countingSort\"}\n                onChange={this.handleChange}\n              ></input>\n              <label htmlFor=\"countingSort\">Counting</label>\n            </div>\n          </div>\n          <button onClick={this.sort}>SORT</button>\n        </div>\n\n        <div className=\"array-container\" style={{ height: `${MAX * SCALE}px` }}>\n          {arrayComponents}\n        </div>\n        <div className=\"array-container\" style={{ height: `${MAX * SCALE}px` }}>\n          {tempArrayComponents}\n        </div>\n      </div>\n    );\n  }\n\n  //SORT\n  sort() {\n    switch (this.state.algorithm) {\n      case \"mergeSort\":\n        this.mergeSort();\n        break;\n      case \"insertionSort\":\n        this.insertionSort();\n        break;\n      case \"bubbleSort\":\n        this.bubbleSort();\n        break;\n      case \"quickSort\":\n        this.quickSort();\n        break;\n      case \"countingSort\":\n        this.countingSort();\n        break;\n    }\n  }\n\n  countingSort() {\n    //console.log(this.state.array);\n    const animations = animateCountingSort(this.state.array, MAX);\n\n    //console.log(this.state.array);\n\n    const mainArray = document.getElementsByClassName(\"main-array-bar\");\n    const tempArray = document.getElementsByClassName(\"temp-array-bar\");\n    const count = document.getElementsByClassName(\"temp-array-text\");\n    const controls = document.getElementsByClassName(\"controls-container\");\n\n    //parseInt(value) + 1\n\n    for (let i = 0; i < animations.length; i++) {\n      const [action, index1, index2] = animations[i];\n\n      switch (action) {\n        case \"begin\":\n          setTimeout(() => {\n            //controls[0].style.opacity = \"0\";\n            controls[0].style.visibility = \"hidden\";\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"finish\":\n          setTimeout(() => {\n            //controls[0].style.opacity = \"1\";\n            controls[0].style.visibility = \"initial\";\n            console.log(\"finished\");\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"initCount\":\n          setTimeout(() => {\n            for (let i = 0; i < MAX; i++) {\n              tempArray[i].style.height = `${(i + 1) * SCALE}px`;\n              tempArray[i].style.backgroundColor = COLOUR_1;\n              count[i].innerHTML = 0;\n            }\n          }, i * ANIMATION_SPEED);\n          break;\n        // case \"curr\":\n        //   setTimeout(() => {\n        //     mainArray[index1].style.backgroundColor = COLOUR_2;\n        //     tempArray[index2].style.backgroundColor = COLOUR_2;\n        //     count[index2].style.color = COLOUR_2;\n        //   }, i * ANIMATION_SPEED);\n        //   break;\n        case \"count1\":\n          setTimeout(() => {\n            mainArray[index1].style.backgroundColor = COLOUR_2;\n            tempArray[index2].style.backgroundColor = COLOUR_2;\n            count[index2].style.color = COLOUR_2;\n            //mainArray[index1].style.height = \"0px\";\n            count[index2].innerHTML = parseInt(count[index2].innerHTML) + 1;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"count2\":\n          setTimeout(() => {\n            mainArray[index1].style.height = \"0px\";\n            tempArray[index2].style.backgroundColor = COLOUR_1;\n            count[index2].style.color = COLOUR_3;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"insert1\":\n          setTimeout(() => {\n            tempArray[index2].style.backgroundColor = COLOUR_2;\n            count[index2].style.color = COLOUR_2;\n            mainArray[index1].style.height = `${\n              this.state.array[index1] * SCALE\n            }px`;\n            mainArray[index1].style.backgroundColor = COLOUR_2;\n            count[index2].innerHTML = parseInt(count[index2].innerHTML) - 1;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"insert2\":\n          setTimeout(() => {\n            mainArray[index1].style.backgroundColor = COLOUR_1;\n            count[index2].style.color = COLOUR_3;\n            tempArray[index2].style.backgroundColor = COLOUR_1;\n          }, i * ANIMATION_SPEED);\n          break;\n      }\n    }\n  }\n  quickSort() {\n    const animations = animateQuickSort(this.state.array);\n\n    const mainArray = document.getElementsByClassName(\"main-array-bar\");\n    const controls = document.getElementsByClassName(\"controls-container\");\n\n    for (let i = 0; i < animations.length; i++) {\n      const [action, index1, index2] = animations[i];\n      //console.log(`${action} / ${index1} / ${index2}`);\n      switch (action) {\n        case \"begin\":\n          setTimeout(() => {\n            //controls[0].style.opacity = \"0\";\n            controls[0].style.visibility = \"hidden\";\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"finish\":\n          setTimeout(() => {\n            //controls[0].style.opacity = \"1\";\n            controls[0].style.visibility = \"initial\";\n            console.log(\"finished\");\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"setBoundary\":\n          setTimeout(() => {\n            console.log(`setBoundary + ${index1} + ${index2}`);\n            for (let i = 0; i < NUM_ELEMENTS; i++) {\n              if (i < index1 || i > index2) {\n                mainArray[i].style.opacity = \"0.25\";\n              }\n            }\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"setPivot\":\n          setTimeout(() => {\n            console.log(`setPivot ${index1}`);\n            mainArray[index1].style.backgroundColor = COLOUR_3;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"curr\":\n          setTimeout(() => {\n            console.log(`curr ${index1}`);\n            mainArray[index1].style.backgroundColor = COLOUR_3;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"swap\":\n          setTimeout(() => {\n            console.log(`swap ${index1} and ${index2}`);\n            const style1 = mainArray[index1].style;\n            const style2 = mainArray[index2].style;\n\n            const height1 = mainArray[index1].style.height;\n            const height2 = mainArray[index2].style.height;\n\n            mainArray[index2].style.height = height1;\n            mainArray[index1].style.height = height2;\n\n            const backgroundColor1 = mainArray[index1].style.backgroundColor;\n            const backgroundColor2 = mainArray[index2].style.backgroundColor;\n\n            mainArray[index1].style.backgroundColor = backgroundColor2;\n            mainArray[index2].style.backgroundColor = backgroundColor1;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"greaterThan\":\n          setTimeout(() => {\n            console.log(`greaterThan ${index1}`);\n            mainArray[index1].style.backgroundColor = \"#bf1347\";\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"smallerThan\":\n          setTimeout(() => {\n            console.log(`smallerThan ${index1}`);\n            mainArray[index1].style.backgroundColor = \"#ff5286\";\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"resetBoundary\":\n          setTimeout(() => {\n            console.log(`resetBoundary from ${index1} to ${index2}`);\n            for (let i = index1; i <= index2; i++) {\n              mainArray[i].style.opacity = \"1\";\n              mainArray[i].style.backgroundColor = COLOUR_1;\n            }\n          }, i * ANIMATION_SPEED);\n          break;\n      }\n    }\n  }\n  bubbleSort() {\n    const animations = animateBubbleSort(this.state.array);\n\n    const mainArray = document.getElementsByClassName(\"main-array-bar\");\n    const controls = document.getElementsByClassName(\"controls-container\");\n\n    for (let i = 0; i < animations.length; i++) {\n      const [action, index1, index2] = animations[i];\n\n      switch (action) {\n        case \"begin\":\n          setTimeout(() => {\n            //controls[0].style.opacity = \"0\";\n            controls[0].style.visibility = \"hidden\";\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"finish\":\n          setTimeout(() => {\n            //controls[0].style.opacity = \"1\";\n            controls[0].style.visibility = \"initial\";\n            console.log(\"finished\");\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"changeColour\":\n          setTimeout(() => {\n            mainArray[index1].style.backgroundColor = COLOUR_2;\n            mainArray[index2].style.backgroundColor = COLOUR_2;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"swap\":\n          setTimeout(() => {\n            const height1 = mainArray[index1].style.height;\n            const height2 = mainArray[index2].style.height;\n\n            mainArray[index2].style.height = height1;\n            mainArray[index1].style.height = height2;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"revertColour\":\n          setTimeout(() => {\n            mainArray[index1].style.backgroundColor = COLOUR_1;\n            mainArray[index2].style.backgroundColor = COLOUR_1;\n          }, i * ANIMATION_SPEED);\n          break;\n      }\n    }\n  }\n  mergeSort() {\n    const animations = animateMergeSort(this.state.array);\n\n    const mainArray = document.getElementsByClassName(\"main-array-bar\");\n    const tempArray = document.getElementsByClassName(\"temp-array-bar\");\n    const controls = document.getElementsByClassName(\"controls-container\");\n\n    for (let i = 0; i < animations.length; i++) {\n      const [action, index1, index2] = animations[i];\n\n      switch (action) {\n        case \"begin\":\n          setTimeout(() => {\n            //controls[0].style.opacity = \"0\";\n            controls[0].style.visibility = \"hidden\";\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"finish\":\n          setTimeout(() => {\n            //controls[0].style.opacity = \"1\";\n            controls[0].style.visibility = \"initial\";\n            console.log(\"finished\");\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"setBoundary\":\n          setTimeout(() => {\n            for (let i = 0; i < NUM_ELEMENTS; i++) {\n              if (i < index1 || i > index2) {\n                mainArray[i].style.opacity = \"0.25\";\n              }\n            }\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"changeColour\":\n          setTimeout(() => {\n            console.log(`change colour ${index1} and ${index2}`);\n            mainArray[index1].style.backgroundColor = COLOUR_2;\n            mainArray[index2].style.backgroundColor = COLOUR_2;\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"insertTemp\":\n          setTimeout(() => {\n            console.log(`insert temp at ${index1} from ${index2}`);\n            tempArray[index1].style.height = mainArray[index2].style.height;\n            mainArray[index2].style.height = \"0px\";\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"copyBack\": {\n          setTimeout(() => {\n            console.log(\"copy back\");\n            mainArray[index1].style.height = tempArray[index1].style.height;\n            tempArray[index1].style.height = \"0px\";\n          }, i * ANIMATION_SPEED);\n          break;\n        }\n        case \"revertColour\":\n          setTimeout(() => {\n            console.log(\"revert colour\");\n            for (let i = index1; i <= index2; i++) {\n              mainArray[i].style.backgroundColor = COLOUR_1;\n            }\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"resetBoundary\": {\n          setTimeout(() => {\n            for (let i = index1; i <= index2; i++) {\n              mainArray[i].style.opacity = \"1\";\n            }\n          }, i * ANIMATION_SPEED);\n        }\n      }\n    }\n\n    // const mainArray = document.getElementsByClassName(\"main-array-bar\");\n    // const tempArray = document.getElementsByClassName(\"temp-array-bar\");\n    // mainArray[1].style.height = \"0px\";\n    // tempArray[1].style.height = `${this.state.array[1] * SCALE}px`;\n  }\n  insertionSort() {\n    const animations = animateInsertionSort(this.state.array);\n\n    const mainArray = document.getElementsByClassName(\"main-array-bar\");\n    const tempArray = document.getElementsByClassName(\"temp-array-bar\");\n    const controls = document.getElementsByClassName(\"controls-container\");\n\n    for (let i = 0; i < animations.length; i++) {\n      const [action, index] = animations[i];\n      switch (action) {\n        case \"begin\":\n          setTimeout(() => {\n            //controls[0].style.opacity = \"0\";\n            controls[0].style.visibility = \"hidden\";\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"finish\":\n          setTimeout(() => {\n            //controls[0].style.opacity = \"1\";\n            controls[0].style.visibility = \"initial\";\n            console.log(\"finished\");\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"newKey\":\n          setTimeout(() => {\n            tempArray[index].style.height = mainArray[index].style.height;\n            mainArray[index].style.height = \"0px\";\n            //console.log(\"new key!\" + index);\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"changeColour\":\n          setTimeout(() => {\n            mainArray[index].style.backgroundColor = COLOUR_2;\n            //console.log(\"change colour!\" + index);\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"swap\":\n          setTimeout(() => {\n            mainArray[index].style.height = mainArray[index - 1].style.height;\n            mainArray[index - 1].style.height = \"0px\";\n            tempArray[index - 1].style.height = tempArray[index].style.height;\n            tempArray[index].style.height = \"0px\";\n            //console.log(\"swap!\" + index);\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"revertColour\":\n          setTimeout(() => {\n            mainArray[index].style.backgroundColor = COLOUR_1;\n            //console.log(\"revert colour!\" + index);\n          }, i * ANIMATION_SPEED);\n          break;\n        case \"insertKey\":\n          setTimeout(() => {\n            mainArray[index].style.height = tempArray[index].style.height;\n            tempArray[index].style.height = \"0px\";\n            mainArray[index].style.backgroundColor = COLOUR_1;\n            //console.log(\"insert key!\" + index);\n          }, i * ANIMATION_SPEED);\n          break;\n      }\n    }\n  }\n\n  //ARRAY\n  componentDidMount() {\n    this.resetArray();\n  }\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUM_ELEMENTS; i++) {\n      array.push(randomInt(MIN, MAX));\n    }\n    this.setState({ array });\n  }\n\n  //SELECT ALGORITHM\n  handleChange = (event) => {\n    const tempArray = document.getElementsByClassName(\"temp-array-bar\");\n    const count = document.getElementsByClassName(\"temp-array-text\");\n    for (let i = 0; i < tempArray.length; i++) {\n      tempArray[i].style.height = \"0px\";\n      count[i].innerHTML = \"\";\n    }\n    this.setState({\n      algorithm: event.target.value,\n    });\n  };\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n","import React from 'react';\n\nimport './App.css';\n\nimport Visualizer from './components/visualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer></Visualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}